<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>DSP ad container</title>
    <style>
      body {
        height: 300px;
        width: 250px;
        overflow: hidden;
        font-family: sans-serif;
        background: rgb(233, 229, 216);
        text-align: center;
        margin: 0 auto;
      }

      #ad-label {
        position: absolute;
        top: 0;
        left: 0;
        margin: 5px;
        padding: 5px;
        background: #3f3f3f;
        color: white;
      }

      #components-container--fenced-frame {
        margin-top: 50px;
        width: 100%;
        padding: 5px;
      }

      p {
        margin: 3px;
        font-size: 14px;
      }
    </style>
  </head>

  <body>
    <div id="adContainer">
      <div id="ad-label">DSP multi-piece ad</div>
      <div id="components-container--fenced-frame"></div>
    </div>
    <script>
      function renderFencedFrameAds(count) {
        const containerEl = document.getElementById('components-container--fenced-frame')
        let componentAdConfigs = window.fence.getNestedConfigs().slice(0, count);
        /**
         * You can also use iframes instead of Fenced Frames. In this case, you can read adAuctionComponents 
         * using the function 'navigator.adAuctionComponents()' which will return the URL of each 
         * Ad Auction component instead of the frame config.
         */

        componentAdConfigs = componentAdConfigs.sort((a, b) => 0.5 - Math.random()); //random order
        for (const componentAdConfig of componentAdConfigs) {
          const frame = document.createElement('fencedframe')
          frame.config = componentAdConfig;
          frame.style.height = '75px';
          frame.style.width = '75px';
          containerEl.appendChild(frame);
        }
      }

      renderFencedFrameAds(5);
    </script>
  </body>
</html>